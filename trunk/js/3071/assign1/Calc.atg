#include<stdio.h>
#include<map>
#include<string>
using namespace std;
COMPILER Calc

  map<string, int> * tab;

CHARACTERS
	digit = '0' .. '9'.
   letter = 'A'..'Z' + 'a'..'z'.
   hexDigit = digit + "ABCDEF".

TOKENS
  ident = letter {letter | digit}.
	number = digit{digit} | "0x" hexDigit {hexDigit}.

COMMENTS FROM "//" TO '\r' '\n'

IGNORE '\r' + '\n'

PRODUCTIONS
	Calc			(. int r; char *name; .)
	=  {
    Ident<name> 
      ":="  
    Expr<r>     (. printf("%s is assigned %d\n", name, r);
                    tab->insert(pair<string, int>(name, r));
                    .)
                    //printf("%d", (tab->find(string(name))->second));.) second makes it work. Shut up. Thanks google 
    }
    /*|
    "display" { Expr<r>
      [
        ":hex"  (. printf("0x%x\n", r); .)
      |
        ":oct   (. printf("0%o\n", r); .)
      ]
      (. printf("%d\n", n); .) */
    .

  Ident<char* &name> //& used to specify output, and returning a string, hence the mad * &.
  =
  ident     (. name = coco_string_create_char(t->val); .)
  .
  /*"display" {  Expr<n> 		(. printf("%d\n", n); .)
   }
   |
   { Expr<n>      (. printf("%d\n", n); .)
   }.*/
	/*-------------------------------------------------------*/	
   //I'm pretty sure this is the wrong way to do this
	Expr<int &n>		(. int n1; .)
	= Term<n>
	{  '+' Term<n1>		(. n = n + n1; .)
      | '*' Term<n1>      (. n = n * n1; .)
	}.
   /*-------------------------------------------------------*/
	Term<int &n>	
	= number		(. swscanf(t->val, L"%d",&n); .) //Where did Rich find this?
	.
END Calc.
