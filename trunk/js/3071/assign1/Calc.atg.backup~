#include<stdio.h>
#include<map>
#include<string>
#include<iterator>
using namespace std;
COMPILER Calc

  map<string, int> * tab; //Using a simple map as the symbol table

CHARACTERS
	digit = '0' .. '9'.
   letter = 'A'..'Z' + 'a'..'z'.
   //hexDigit = digit + "ABCDEF".

TOKENS
   ident = letter {letter | digit}.
	number = digit{digit} .//| "0x" hexDigit {hexDigit}.

COMMENTS FROM "//" TO '\r' '\n'

IGNORE '\r' + '\n'

PRODUCTIONS
	Calc			(. int p; char *name; .)
	=
   {
    Ident<name> 
      ":="  
    Expr<p>";"     (. 
                   // printf("%s is assigned %d\n", name, p); //For debugging
                    //Have to check the value has not already been assigned
                    map<string, int>::iterator it = tab->find(string(name));
                    if(it == tab->end()){
                        tab->insert(pair<string, int>(name, p));
                    }else{
                        tab->erase(string(name)); //Bit clunky, but does the job
                        tab->insert(pair<string, int>(name, p));
                    }
                 .)
    }
    { "display"  Expr<p>
       Ident<name> 
      [
        ":hex;"  (. printf("%s = 0x%x\n",name, p); .)
      |
        ":oct;"  (. printf("%s = 0o%o\n",name, p); .)
      |
        ";"        (. printf("%s = %d\n",name, p); .)
      ]
    }
    [ "halt"   (. exit(0); .) ]
    .

  Ident<char* &name> //& used to specify output, and returning a string, hence the mad * &.
  =
  ident     (. name = coco_string_create_char(t->val); .)
  .
	/*-------------------------------------------------------*/	
	Expr<int &q>		(. int r; .)
	= Term<q>
	{  '+' Term<r>		(. q = q + r; .)
      | '-' Term<r>      (. q = q - r; .)
	}.

   /*-------------------------------------------------------*/
	Term<int &q>  (. int r; .) //Simple way to build in precedence	
   =
   Factor<q>
   {  '*' Factor<r> (. q = q * r; .)
      |
      '/' Factor<r> (. q = q / r; .)
      |
      '%' Factor<r> (. q = q % r; .)
   }.

   Factor<int &q>    (. int r; .)
   =
   Expon<q>
   { '^' Expon<r>  (.  int origR = r;
                        while(r != 1){
                        r = r*origR;
                        r--;
                       }
                       .)
   }.
   
   Expon<int &p>    (. char *name; .)
   = number       (. swscanf(t->val, L"%d",&p);  .)
   | ident (.  //Look for the value in the map. If it's not there print an error
               map<string, int>::iterator it = tab->find(coco_string_create_char(t->val));
               if(it != tab->end()){
                  p = it->second;
               }else{
                  p = 0;
                  printf("Unknowen var\n");
                }
               .)
         
   | "(" Expr<p> ")" 
   .
	
   
END Calc.
