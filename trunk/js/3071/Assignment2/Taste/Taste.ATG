COMPILER Taste

	const int // types
	  undef = 0, integer = 1, boolean = 2;

	const int // object kinds
	  var = 0, proc = 1, constant =3, array = 4;

	public SymbolTable   tab;
	public CodeGenerator gen;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab



PRODUCTIONS
/*------------------------------------------------------------------------*/
AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  ).
/*------------------------------------------------------------------------*/
Expr<out int type>       (. int type1; Op op; .)
= SimExpr<out type>
  [ RelOp<out op>
    SimExpr<out type1>   (. if (type != type1) SemErr("incompatible types");
                            gen.Emit(op); type = boolean; .)
  ].
/*------------------------------------------------------------------------*/
Factor<out int type>     (. int n; Obj obj; string name; .)
=                        (. type = undef; .)
  ( Ident<out name>      (. obj = tab.Find(name); type = obj.type; n =0;
                          .)
    [ '[' number           (. n = Convert.ToInt32(t.val); .)
    ']' ]
                            (.if (obj.kind == var) {			      if (obj.level == 0) gen.Emit(Op.LOADG, obj.adr + n);
			      else gen.Emit(Op.LOAD, obj.adr + n);
                            } else SemErr("variable expected");
                            .)
    
  | number               (. n = Convert.ToInt32(t.val); 
                            gen.Emit(Op.CONST, n); type = integer; .)
  | '-'
    Factor<out type>     (. if (type != integer) {
                              SemErr("integer type expected"); type = integer;
                            }
                            gen.Emit(Op.NEG); .)
  | "true"               (. gen.Emit(Op.CONST, 1); type = boolean; .)
  | "false"              (. gen.Emit(Op.CONST, 0); type = boolean; .)
  ).
/*------------------------------------------------------------------------*/
Ident<out string name>
= ident                  (. name = t.val; .).
/*------------------------------------------------------------------------*/
MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | '/'                  (. op = Op.DIV; .)
  ).
/*------------------------------------------------------------------------*/
ProcDecl                 (. string name; Obj obj; int adr; .)
= "void"
  Ident<out name>        (. obj = tab.NewObj(name, proc, undef); obj.adr = gen.pc;
                            if (name == "Main") gen.progStart = gen.pc; 
                            tab.OpenScope(); .)
  '(' ')'
  '{'                    (. gen.Emit(Op.ENTER, 0); adr = gen.pc - 2; .)
  { VarDecl | Stat }
  '}'                    (. gen.Emit(Op.LEAVE); gen.Emit(Op.RET);
                            gen.Patch(adr, tab.topScope.nextAdr);
                            tab.CloseScope(); .).
/*------------------------------------------------------------------------*/
RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "=="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  //Additional relational operators. Also see CodeGen.cs
  | "!="                 (. op = Op.NEQU; .)
  | "<="                 (. op = Op.LSSEQ; .)
  | ">="                 (. op = Op.GTREQ; .)
  ).
/*------------------------------------------------------------------------*/
SimExpr<out int type>    (. int type1; Op op; .)
= Term<out type>
  { AddOp<out op>
    Term<out type1>      (. if (type != integer || type1 != integer) 
                              SemErr("integer type expected");
                            gen.Emit(op); .)
	}.
/*------------------------------------------------------------------------*/
Stat                     (. int type,type1,type2; string name; Obj obj;
                            string name2; Obj obj2;
                            int adr, adr2, loopstart; 
                            int loopUpdate; .)
= Ident<out name>        (. obj = tab.Find(name); .)
  ( '='                  (. if (obj.kind != var) SemErr("cannot assign to procedure"); .)
		Expr<out type> ([';']   //Make this optional to accomidate for loop syntax (the 3rd or update expression"). ; is now optional at the end of a line
				(. if (type != obj.type) SemErr("incompatible types");
				   if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
				   else gen.Emit(Op.STO, obj.adr); .)
				|  /*Code for conditional assignment here. The same as the If statement below
				   except for the store instructions after the jump instructions */
			        (. if(type != boolean) SemErr("Boolean expression expected");
				   gen.Emit(Op.FJMP, 0); adr = gen.pc -2; 
				   if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
				  else gen.Emit(Op.STO, obj.adr); .)
					'?'Expr<out type1> ':'				
				(. gen.Emit(Op.JMP,0); adr2 = gen.pc -2;
		      		   gen.Patch(adr,gen.pc); adr = adr2;
				   if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
				   else gen.Emit(Op.STO, obj.adr); 
								 .)
					Expr<out type2>';'				
				(. gen.Patch(adr, gen.pc); .)
				
                  )
	| '(' ')' ';'          (. if (obj.kind != proc) SemErr("object is not a procedure");
			  	gen.Emit(Op.CALL, obj.adr); .)
   | //Array reference
     '['( Ident<out name>  (. obj2 = tab.Find(name);
                             if(obj.type != integer) SemErr("Integer expected");
                             if(obj.level == 0) gen.Emit(Op.LOADG, obj.adr);
                             else gen.Emit(Op.LOAD, obj.adr); .)

                            
     ']'
     '=' Expr<out type1>';' (. if(type1 != obj.type) SemErr("incompatible types");
                               gen.Emit(Op.ADD);
                               gen.Emit(Op.STO, obj.adr);
                                .)
     |  number          (. adr = Convert.ToInt32(t.val);.)
       ']'
       '=' Expr<out type1> ';' (. gen.Emit(Op.STO, obj.adr + adr); .)
     )
	)
   
 | "switch"  //Sperate code needed fror number
      '(' Ident<out name> (. obj = tab.Find(name);  adr2 = 0; 
                              ArrayList jumps = new ArrayList(); //Arraylist is used to store the address of the jmp instructions after a "break;"
                              if(obj.type != integer) SemErr("Integer type expected");
                              if(obj.level == 0) gen.Emit(Op.LOADG, obj.adr);
                              else gen.Emit(Op.LOAD, obj.adr);
                              .)
                  ')'
                  '{'       
                  "case" 
                  Expr<out type>   (. if(type != obj.type) SemErr("Incompatible types in case"); 
                                       gen.Emit(Op.EQU); 
                                       gen.Emit(Op.FJMP, 0); adr = gen.pc -2;.)
                  ':'
                  Stat 
                  [ "break;"        (. gen.Emit(Op.JMP, 0); adr2 = 1; //Record a break has been used
                                        jumps.Add((gen.pc -2)); 
                                        .)
                  ]

                  {
                     "case"      (. gen.Patch(adr, gen.pc);
                                    if(obj.level == 0) gen.Emit(Op.LOADG, obj.adr);
                                    else gen.Emit(Op.LOAD, obj.adr); .)
                        Expr<out type>  (. if(type != obj.type) SemErr("Incompatible types in case"); 
                                       gen.Emit(Op.EQU); 
                                       gen.Emit(Op.FJMP, 0); adr = gen.pc -2;.)
                        ':'
                        Stat
                        [ "break;"        (. gen.Emit(Op.JMP, 0); adr2 =1; jumps.Add((gen.pc -2)); 
                                        .)
                        ]
                  }
                  {
                     "default:"  (. gen.Patch(adr, gen.pc); .)
                        Stat
                        //do break later
                        ["break;" ] //Not needed here really
                  }
      '}'                        (. 
                                    gen.Patch(adr, gen.pc);
                                    if(adr2 != 0){
                                       foreach(int i in jumps){
                                          gen.Patch(i, gen.pc);
                                       }
                                    }
                                  .)
| "if" 
	'(' Expr<out type> ')' 	(. if (type != boolean) SemErr("boolean type expected");
				 gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .) //Emit(Op.FJMP, 0) The address, 0, is written in later when patch is called
	Stat
	[ "else"               (. gen.Emit(Op.JMP, 0); adr2 = gen.pc - 2;
				  gen.Patch(adr, gen.pc);  //Patch the address to branch to should the boolean check fail
				  adr = adr2; .)
		Stat 
	]                      (. gen.Patch(adr, gen.pc); .)

| "while"                	(. loopstart = gen.pc; .)	
	'(' Expr<out type> ')' (. if (type != boolean) SemErr("boolean type expected");
				  gen.Emit(Op.FJMP, 0); adr = gen.pc - 2; .)
	Stat                   (. gen.Emit(Op.JMP, loopstart); gen.Patch(adr, gen.pc); .)

| "do"                  	(. loopstart = gen.pc; .)
   Stat                 
   "while" '(' Expr<out type> ')' (. if(type != boolean) SemErr("Boolean type expected");
                                     gen.Emit(Op.FJMP, 0); adr = gen.pc -2;
                                     gen.Emit(Op.JMP, loopstart);
                                     gen.Patch(adr, gen.pc); .)
                                     

| "read"
	Ident<out name> ';'    (. obj = tab.Find(name);
				  if (obj.type != integer) SemErr("integer type expected");
				  gen.Emit(Op.READ);
				  if (obj.level == 0) gen.Emit(Op.STOG, obj.adr);
				  else gen.Emit(Op.STO, obj.adr); .)

| "write" 
	Expr<out type> ';'     (. if (type != integer) SemErr("integer type expected");
				 gen.Emit(Op.WRITE); .)

| "for"                   
   '('Stat                (. loopstart = gen.pc; .)
      Expr<out type> ';' (. if(type != boolean) SemErr("boolean type expected");
                            gen.Emit(Op.FJMP, 0); adr = gen.pc -2; //Jump if check fails
                            gen.Emit(Op.JMP, 0); adr2 = gen.pc -2; //Jump to loop body
                            loopUpdate = gen.pc; .)                //Label loop update
      Stat               (. gen.Emit(Op.JMP, loopstart); .)             //Jump to start after update
   ')'                   (. gen.Patch(adr2, gen.pc); .)
   Stat                  (. gen.Emit(Op.JMP, loopUpdate); gen.Patch(adr, gen.pc); .) //Jump to update after body
  
| '{' { Stat | VarDecl } '}' .
/*------------------------------------------------------------------------*/
Taste                    (. string name; .)
= "program"
  Ident<out name>        (. tab.OpenScope(); .)
  '{'
  { VarDecl | ProcDecl }
  '}'                    (. tab.CloseScope();
                            if (gen.progStart == -1) SemErr("main function never defined");
                            .).
/*------------------------------------------------------------------------*/
Term<out int type>       (. int type1; Op op; .)
= Factor<out type>
  { MulOp<out op>
    Factor<out type1>    (. if (type != integer || type1 != integer) 
                              SemErr("integer type expected");
                            gen.Emit(op); .)
	}.
/*------------------------------------------------------------------------*/
Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 | "const"               (. type = constant; .)
 ).
/*------------------------------------------------------------------------*/
VarDecl                  (. string name; int type; int kind = var; int size =1;/*Size is a bad solution, fix later*/ .)
= Type<out type>
  Ident<out name>        
  ['['number (. size = Convert.ToInt32(t.val); .)
      ']'                 
  ]                       (. tab.NewObj(name, kind, type, size);//Need  to make space on stack here
        .)
  { ',' Ident<out name>  (. 
                             tab.NewObj(name, var, type); .)
  } ';'.
/*------------------------------------------------------------------------*/
ConstDecl
= "const" Type<out type>
   Ident<out name>
END Taste.
